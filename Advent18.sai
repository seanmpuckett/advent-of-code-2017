object Advent18 1.0.0

Instantiate task

  set program '''
    set i 31
    set a 1
    mul p 17
    jgz p p
    mul a 2
    add i -1
    jgz i -2
    add a -1
    set i 127
    set p 618
    mul p 8505
    mod p a
    mul p 129749
    add p 12345
    mod p a
    set b p
    mod b 10000
    snd b
    add i -1
    jgz i -9
    jgz a 3
    rcv b
    jgz b -1
    set f 0
    set i 126
    rcv a
    rcv b
    set p a
    mul p -1
    add p b
    jgz p 4
    snd a
    set a b
    jgz 1 3
    snd b
    set f 1
    add i -1
    jgz i -11
    snd a
    jgz f -16
    jgz a -19
  
  set program chain self
    split /\r|\n/
    thru .split(/\s+/)

  // part 1

  set
    registers blank
    frequency 0
    pc 0
    
    Value task as operand
      with number operand
        return . ?? . :: registers[operand] default 0
  
  while program[pc]
    switch .0
      case 'snd'
        set frequency to Value(.1)
      case 'set'
        set registers[.1] to Value(.2)
      case 'add'
        set registers[.1] to (self default 0) + Value(.2)
      case 'mul'
        set registers[.1] to (self default 0) * Value(.2)
      case 'mod'
        set registers[.1] to (self default 0) % Value(.2)
      case 'rcv'
        if Value(.1)
          debug "Part 1: ${frequency}"
          set pc to -999
      case 'jgz'
        if Value(.1) > 0
          set pc (self + Value(.2))-1
    inc pc
     
  // part 2
  
  
  set vm array 0, 1; thru create 'ADvent18VM' program, .
  vm.0.Link vm.1
  vm.1.Link vm.0
    
  while vm.0.state='ok' or vm.1.state='ok'
    each vm
      unless .state = 'halt'
        .Step
      
  debug "Part 2: ${vm.1.sends}"


